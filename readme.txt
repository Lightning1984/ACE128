This library provides support for the Bourns EAW - Absolute Contacting Encoder (ACE) 

http://www.jameco.com/webapp/wcs/stores/servlet/Product_10001_10001_1164074_-1

This is a small 8 bit gray code rotary position sensor providing 128 unique positions.
It manages this with a single encoder track with 8 contacts spaced evenly around it.  

This is developed against Arduino UNO R3. Untested on other models. 

The code currently supports the MCP23008, PCF8574 and PCF8574A I2C expanders

Select with the following addresses

0x00 - 0x07 MCP23008 addresses 0x20-0x27. Backward compatible with earlier library revision
0x20 - 0x27 PCF8574
0x38 - 0x3F PCF8574A

Note that the MCP23008 and PCF8574 chips use the same i2c address range. Many
LCD backpacks also use one of these chips. Be careful when mixing all this on
the same bus to avoid duplicating addresses. To confuse things further, raw
i2c addresses have the lowest order bit as a read/write signal, so some
documents, like some of the PCF datasheets, will refer to 0x40 and 0x70 
which is 0x20 and 0x38 shifted left one bit.

Installation
--------------------------------------------------------------------------------

To install this library, just place this entire folder as a subfolder in your
Arduino/lib/targets/libraries folder.

The enclosed test script drives a 2x16 display direct from the Arduino without
a backpack. https://youtu.be/ZnTclg9Rlhw

Public Methods
--------------------------------------------------------------------------------
  // user-accessible "public" interface
  public:
    // constructor takes i2caddr (see above) and pointer to PROGMEM map table
    // example: ACE128 myACE((uint8_t)0, (uint8_t*)encoderMap_12345678);
    // see make_encodermap example sketch for alternate pin mappings 
    ACE128(uint8_t i2caddr, uint8_t *map); 
    void begin();                  // initializes IO expander, call from setup()
    uint8_t upos();                // returns logical position 0 -> 127
    int8_t pos();                  // returns logical position -64 -> +63
    void setZero(uint8_t rawPos);  // sets logical zero position
    uint8_t getZero();             // returns logical zero position
    uint8_t rawPos();              // returns raw mechanical position
    uint8_t acePins();             // returns gray code inputs
    void reverse(boolean reverse); // set counter-clockwise operation

Usage
--------------------------------------------------------------------------------
See the test example. 
Include all the encoder maps you need (see below) to match the pin sequences
of your ACE units. 
Declare all your ACE128 objects using the ACE128 constructor. It takes an
i2c address and a pointer to the encoder map.
call the begin method for each ACE128 object from setup().
Within setup you may also want to call setZero() using a stored rawPos(). The
pos() and upos() methods return the position relative to a logical zero
position rather than the zero position returned by the encoder, which is in a
mechanically arbitrary spot.
Once per loop(), call pos() or upos() and store the value in a variable.
Accessing i2c bus takes some cycles, so don't call pos() everytime you want to
refer to it. 
I like to include a zero-set routine which will call 
  myACE.setZero(myACE.rawPos())
to set the current position as zero and then store the rawPos() value to EEPROM,
where I can read it back reset zero values at startup. 

Encoder Maps
--------------------------------------------------------------------------------

This library comes with various encoder maps to permit different wiring of the pins
between the ACE and the IO expander. These are generated by the included make_encoder
example sketch - copy the serial monitor output to a new .h file in the ACE128 folder.  

12345678 is for the "rising counter clockwise" wiring, which matches the datasheet
numbers and is recommended for breadboard testing. 

comments and feedback via http://redhunter.com 

